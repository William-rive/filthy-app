generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          String          @default("user") @db.VarChar(255)
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  finished    Boolean  @default(false)
}

model Tune {
  id          String    @id @default(uuid())
  name        String
  description String
  code        String
  createdAt   DateTime  @default(now())
  postedBy    String
  updatedAt   DateTime  @updatedAt
  tags        TuneTag[]
}

model Tag {
  id       String      @id @default(dbgenerated("gen_random_uuid()"))
  name     String      @unique
  liveries LiveryTag[]
  tunes    TuneTag[]
}

model TuneTag {
  tuneId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tune   Tune   @relation(fields: [tuneId], references: [id])

  @@id([tuneId, tagId])
}

model Livery {
  id          String      @id @default(uuid())
  name        String
  description String
  image       String
  createdAt   DateTime    @default(now())
  postedBy    String
  updatedAt   DateTime    @updatedAt
  tags        LiveryTag[]
}

model LiveryTag {
  liveryId String
  tagId    String
  livery   Livery @relation(fields: [liveryId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([liveryId, tagId])
}
